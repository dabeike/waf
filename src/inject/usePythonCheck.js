// Generated by CoffeeScript 1.9.2
(function() {
  var callit_test, check, config, connect_ok, connect_ok_test, count, deepCopy, error, fs, get_res, ii, iport, lits, net, options, port_num, start_test, work;

  net = require("net");

  fs = require('fs');

  deepCopy = function(o) {
    return JSON.parse(JSON.stringify(o));
  };

  options = {
    port: 10000,
    host: '127.0.0.1'
  };

  port_num = 10;

  config = JSON.parse(fs.readFileSync('./admin/config/config.json'));

  options.host = config.sql.basic.local_ip;

  options.port = config.sql.basic.start_port;

  port_num = config.sql.basic.port_num;

  lits = [];

  iport = 0;

  connect_ok_test = function(i) {
    return function() {
      this.write(JSON.stringify({
        d: "aaa"
      }));
      return console.log('bi:' + i);
    };
  };

  count = 0;

  work = function(i) {
    var client, option;
    option = deepCopy(options);
    option.port += i;
    client = net.connect(option, connect_ok_test(i));
    client.on('data', function(data) {
      console.log(data.toString());
      count += 1;
      this.end();
      this.destroy();
      return console.timeEnd('lable');
    });
    return client.on('error', function(e) {
      console.log(count + e.code + i);
      return work(i);
    });
  };

  start_test = function() {
    var i, j, k, l;
    for (j = k = 0; k <= 10; j = ++k) {
      for (i = l = 0; l < 100; i = ++l) {
        console.log(i);
        work(i);
      }
    }
    return console.time('lable');
  };

  connect_ok = function(data) {
    return function() {
      console.log(data);
      return this.write(JSON.stringify(data));
    };
  };

  get_res = function(callback) {
    return function(res) {
      this.end();
      return callback(res.toString());
    };
  };

  error = function(data) {
    return function(e) {
      console.log(e.code);
      return check(data);
    };
  };

  check = function(data, callback) {
    var client, option;
    option = deepCopy(options);
    iport++;
    option.port += iport % port_num;
    console.log(option);
    client = net.connect(option, connect_ok(data));
    client.on('data', get_res(callback));
    return client.on('error', error(data));
  };

  callit_test = function(res) {
    return console.log(res.toString());
  };

  ii = {
    'd': 'aaa'
  };

  exports.check = check;

}).call(this);

//# sourceMappingURL=usePythonCheck.js.map
